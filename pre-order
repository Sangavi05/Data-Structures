#include <stdio.h>
#include <stdlib.h>

typedef struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;

TreeNode* createNode(int data) {
    TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
    if (!newNode) {
        printf("Memory allocation error\n");
        exit(1);
    }
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

void insertNode(TreeNode** root, int data) {
    if (*root == NULL) {
        *root = createNode(data);
        return;
    }
    
    TreeNode* queue[100]; 
    int front = 0, rear = 0;
    
    queue[rear++] = *root;
    
    while (front < rear) {
        TreeNode* temp = queue[front++];
        
        if (temp->left != NULL) {
            queue[rear++] = temp->left;
        } else {
            temp->left = createNode(data);
            return;
        }
        
        if (temp->right != NULL) {
            queue[rear++] = temp->right;
        } else {
            temp->right = createNode(data);
            return;
        }
    }
}

void preOrderTraversal(TreeNode* root) {
    if (root == NULL) {
        return; 
    }
    
    printf("%d ", root->data);
    
    preOrderTraversal(root->left);
    
    preOrderTraversal(root->right);
}

void freeTree(TreeNode* root) {
    if (root == NULL) {
        return;
    }
    
    freeTree(root->left);
    freeTree(root->right);
    
    free(root);
}

int main() {
    TreeNode* root = NULL;

    insertNode(&root, 1);
    insertNode(&root, 2);
    insertNode(&root, 3);
    insertNode(&root, 4);
    insertNode(&root, 5);
    insertNode(&root, 6);
    insertNode(&root, 7);

    printf("Pre-order traversal of the binary tree:\n");
    preOrderTraversal(root);
    printf("\n");
    freeTree(root);

    return 0;
}
