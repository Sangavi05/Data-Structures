#include <stdio.h>
#include <stdlib.h>
#include <limits.h> 


typedef struct Node {
    int data;            
    struct Node *left;   
    struct Node *right;  
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

void findMinMax(Node* root, int* min, int* max) {
    if (root == NULL) {
        return;
    }

    if (*min == INT_MAX && *max == INT_MIN) {
        *min = root->data;
        *max = root->data;
    } else {
        if (root->data < *min) {
            *min = root->data;
        }
        if (root->data > *max) {
            *max = root->data;
        }
    }

    findMinMax(root->left, min, max);
    findMinMax(root->right, min, max);
}

void insertNode(Node** root, int data) {
    if (*root == NULL) {
        *root = createNode(data);
        return;
    }

    Node* queue[100];
    int front = 0;
    int rear = 0;

    queue[rear++] = *root;

    while (front < rear) {
        Node* current = queue[front++];

        if (current->left == NULL) {
            current->left = createNode(data);
            return;
        } else {
            queue[rear++] = current->left;
        }

        if (current->right == NULL) {
            current->right = createNode(data);
            return;
        } else {
            queue[rear++] = current->right;
        }
    }
}

void freeTree(Node* root) {
    if (root != NULL) {
        freeTree(root->left);
        freeTree(root->right);
        free(root);
    }
}

int main() {
    Node* root = NULL; 

    // Insert nodes into the tree
    insertNode(&root, 10);
    insertNode(&root, 5);
    insertNode(&root, 20);
    insertNode(&root, 1);
    insertNode(&root, 15);
    insertNode(&root, 25);
    insertNode(&root, 30);

    int min = INT_MAX;
    int max = INT_MIN;

    findMinMax(root, &min, &max);

    printf("Minimum value in the binary tree: %d\n", min);
    printf("Maximum value in the binary tree: %d\n", max);

  
    freeTree(root);

    return 0;
}
