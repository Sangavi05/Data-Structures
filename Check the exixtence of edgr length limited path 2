#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

typedef struct {
    int v;
    int weight;
} Edge;

typedef struct {
    Edge edges[MAX_VERTICES];
    int edgeCount;
} AdjacencyList;

typedef struct {
    AdjacencyList adj[MAX_VERTICES];
} Graph;

void addEdge(Graph* graph, int u, int v, int weight) {
    graph->adj[u].edges[graph->adj[u].edgeCount].v = v;
    graph->adj[u].edges[graph->adj[u].edgeCount].weight = weight;
    graph->adj[u].edgeCount++;
    
    // For undirected graph
    graph->adj[v].edges[graph->adj[v].edgeCount].v = u;
    graph->adj[v].edges[graph->adj[v].edgeCount].weight = weight;
    graph->adj[v].edgeCount++;
}

int visited[MAX_VERTICES];

int dfs(Graph* graph, int current, int target, int L) {
    if (current == target) return 1;
    visited[current] = 1;

    for (int i = 0; i < graph->adj[current].edgeCount; i++) {
        Edge edge = graph->adj[current].edges[i];
        if (!visited[edge.v] && edge.weight <= L) {
            if (dfs(graph, edge.v, target, L)) {
                return 1;
            }
        }
    }

    return 0;
}

int existsLimitedPath(Graph* graph, int start, int target, int L) {
    for (int i = 0; i < MAX_VERTICES; i++) {
        visited[i] = 0; // Reset visited for each new query
    }
    return dfs(graph, start, target, L);
}

int main() {
    Graph graph;
    for (int i = 0; i < MAX_VERTICES; i++) {
        graph.adj[i].edgeCount = 0;
    }

    // Sample graph edges (u, v, weight)
    addEdge(&graph, 0, 1, 3);
    addEdge(&graph, 0, 2, 5);
    addEdge(&graph, 1, 2, 2);
    addEdge(&graph, 1, 3, 4);
    addEdge(&graph, 2, 3, 1);
    addEdge(&graph, 3, 4, 7);

    int start = 0;    // Starting vertex
    int target = 4;   // Target vertex
    int L = 5;        // Maximum allowed edge length

    if (existsLimitedPath(&graph, start, target, L)) {
        printf("There exists a path from %d to %d with edge lengths limited to %d.\n", start, target, L);
    } else {
        printf("No path exists from %d to %d with edge lengths limited to %d.\n", start, target, L);
    }

    return 0;
}
